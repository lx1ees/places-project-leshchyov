import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:places/constants/app_assets.dart';
import 'package:places/constants/app_colors.dart';
import 'package:places/constants/app_constants.dart';

/// –°–ø–ª–µ—à-—ç–∫—Ä–∞–Ω
class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    _navigateToNext();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        alignment: Alignment.center,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [
              AppColors.greenColor,
              AppColors.yellowColor,
            ],
            transform: GradientRotation(3),
          ),
        ),
        child: SvgPicture.asset(
          AppAssets.splashLogo,
          width: AppConstants.splashLogoSize,
          height: AppConstants.splashLogoSize,
        ),
      ),
    );
  }

  /// –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω —Å –ª–æ–≥–∏–∫–æ–π: –æ–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é,
  /// –æ–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ —Å–ø–ª–µ—à–∞, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—å —Å–ø–ª–µ—à –¥–æ —Ç–µ—Ö –ø–æ—Ä,
  /// –ø–æ–∫–∞ –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ —É—Å–ª–æ–≤–∏—è.
  Future<void> _navigateToNext() async {
    /// –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–∏–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é [isInitialized] –≤ –∫–ª–∞—Å—Å–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–∏—é,
    /// –Ω–æ –ø–æ–∑–∂–µ –ø–µ—Ä–µ–Ω–µ—Å —Å—é–¥–∞, —Ç.–∫. –Ω–µ –≤–∏–∂—É —Å–º—ã—Å–ª–∞ —Ö—Ä–∞–Ω–∏—Ç—å –µ–µ –≤ –∫–ª–∞—Å—Å–µ. –ù–∞–¥–µ—é—Å—å,
    /// —Ç–∞–∫–∞—è —Å–∞–º–æ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –≤–æ–∑–±—Ä–∞–Ω—è–µ—Ç—Å—è üòÖ
    final isInitialized =
        Future.delayed(const Duration(seconds: 2), () => true);
    final isMinSplashTimeOver = Future.delayed(
      const Duration(seconds: AppConstants.minSplashTimeInSec),
      () => true,
    );

    try {
      final isNavigationAllowed =
          !(await Future.wait([isInitialized, isMinSplashTimeOver]))
              .contains(false);

      if (isNavigationAllowed) {
        if (kDebugMode) {
          print('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω');
        }
      }
    } on Exception catch (_) {
      /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Future
    }
  }
}
