import 'package:flutter/material.dart';
import 'package:mwwm/mwwm.dart';
import 'package:places/domain/interactor/place_interactor.dart';
import 'package:places/domain/model/location_point.dart';
import 'package:places/domain/model/place.dart';
import 'package:places/domain/model/place_type.dart';
import 'package:relation/relation.dart';

/// –í–∏–¥–∂–µ—Ç-–º–æ–¥–µ–ª—å —ç–∫—Ä–∞–Ω–∞ –î–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞
class AddPlaceWidgetModel extends WidgetModel {
  /// üÜò –ù–µ –∑–Ω–∞—é, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã–Ω–æ—Å–∏—Ç—å —Å—é–¥–∞ –∫–ª—é—á, –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞—à–µ–ª, –Ω–æ –∫–∞–∂–µ—Ç—Å—è
  /// —á—Ç–æ widget –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω –∏ –≤—Å–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è –≤–∏–¥–∂–µ—Ç –º–æ–¥–µ–ª–∏,
  /// –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π. –ï—Å–ª–∏ –Ω–µ —Ç–∞–∫, –æ–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.
  final formKey = GlobalKey<FormState>();

  /// –°—Ç–µ–π—Ç—ã
  final imagesState = EntityStreamedState<List<String>>();
  final placeTypeState = StreamedState<PlaceType?>(null);
  final nameState = EntityStreamedState<String>();
  final latState = EntityStreamedState<double?>();
  final lonState = EntityStreamedState<double?>();
  final descriptionState = EntityStreamedState<String>();

  /// –ù–∞–º–µ—Ä–µ–Ω–∏—è
  final addImageAction = StreamedAction<String>();
  final removeImageAction = StreamedAction<int>();
  final setPlaceTypeAction = StreamedAction<PlaceType?>();
  final setNameAction = StreamedAction<String>();
  final setLatAction = StreamedAction<double?>();
  final setLonAction = StreamedAction<double?>();
  final setDescriptionAction = StreamedAction<String>();
  final submitAddingPlaceAction = VoidAction();

  final PlaceInteractor _placeInteractor;
  final NavigatorState _navigator;

  AddPlaceWidgetModel(
    WidgetModelDependencies baseDependencies, {
    required PlaceInteractor placeInteractor,
    required NavigatorState navigator,
  })  : _placeInteractor = placeInteractor,
        _navigator = navigator,
        super(baseDependencies);

  @override
  void onLoad() {
    imagesState.content([]);
    super.onLoad();
  }

  @override
  void onBind() {
    super.onBind();
    subscribeHandleError<String>(addImageAction.stream, (value) {
      final currentImages = imagesState.value.data ?? [];
      imagesState.content(currentImages..add(value));
    });

    subscribeHandleError<int>(removeImageAction.stream, (value) {
      final currentImages = imagesState.value.data ?? [];
      imagesState.content(currentImages..removeAt(value));
    });

    subscribeHandleError<PlaceType?>(
      setPlaceTypeAction.stream,
      placeTypeState.accept,
    );
    subscribeHandleError<String>(setNameAction.stream, nameState.content);
    subscribeHandleError<double?>(setLatAction.stream, latState.content);
    subscribeHandleError<double?>(setLonAction.stream, lonState.content);
    subscribeHandleError<String>(
      setDescriptionAction.stream,
      descriptionState.content,
    );

    subscribeHandleError<void>(submitAddingPlaceAction.stream, (_) async {
      if ((formKey.currentState?.validate() ?? false) &&
          _isAllFieldsFilledAndCorrect(
            placeType: placeTypeState.value,
            name: nameState.value.data,
            lat: latState.value.data,
            lon: lonState.value.data,
            description: descriptionState.value.data,
          )) {
        await _addNewPlace(
          placeType: placeTypeState.value!,
          name: nameState.value.data!,
          lon: lonState.value.data!,
          lat: latState.value.data!,
          description: descriptionState.value.data!,
        );

        _navigator.pop();
      }
    });
  }

  /// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  /// –ø–æ–ª–µ–π
  bool _isAllFieldsFilledAndCorrect({
    PlaceType? placeType,
    String? name,
    double? lat,
    double? lon,
    String? description,
  }) {
    final isPlaceTypeSelected = placeType != null;
    final isNameProvided = name != null && name.isNotEmpty;
    final isLatProvided = lat != null;
    final isLonProvided = lon != null;
    final isDescriptionProvided = description != null && description.isNotEmpty;

    if (isPlaceTypeSelected &&
        isNameProvided &&
        isLatProvided &&
        isLonProvided &&
        isDescriptionProvided) {
      return true;
    }

    return false;
  }

  /// –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞
  Future<void> _addNewPlace({
    required PlaceType placeType,
    required String name,
    required double lat,
    required double lon,
    required String description,
  }) async {
    final newPlace = Place(
      name: name,
      point: LocationPoint(lat: lat, lon: lon),
      description: description,
      placeType: placeType,
    );
    await _placeInteractor.addNewPlace(newPlace);
  }
}
